import UIKit
#if canImport(SwiftUI) && DEBUG
import SwiftUI

{% for type in types.types|class where type.implements.AutoPreviewable or type|annotated:"AutoPreviewable" %}
{% if type.isFinal %}
@available(iOS 13, *)
struct {{ type.name }}Previews: PreviewProvider {
    static var previews: some View {
        ForEach(DeviceType.allCases, id: \.self) { type in
            {{ type.name }}()
                {% if type.annotations.customHeight %}
                .previewLayout(type.layout(height: {{ type.annotations.customHeight }}))
                {% endif %}
                .previewDevice(PreviewDevice(rawValue: type.rawValue))
                .previewDisplayName(type.rawValue)
        }
    }

    static var platform: PreviewPlatform? = .iOS
}

@available(iOS 13, *)
extension {{ type.name }}: UIViewRepresentable {
    {{ type.accessLevel }} typealias UIViewType = {{ type.name }}

    {{ type.accessLevel }} func makeUIView(context: Context) -> {{ type.name }} {
        {% if type.annotations.xibLess %}
        return .init()
        {% else %}
        // swiftlint:disable force_cast
        return UINib(nibName: String(describing: String(describing: self)), bundle: nil)
            .instantiate(withOwner: nil, options: nil)[0] as! {{ type.name }}
        // swiftlint:enable force_cast
        {% endif %}
    }

    {{ type.accessLevel }} func updateUIView(_ uiView: {{ type.name }}, context: Context) {
        // Make parameter change for preview
    }
}
{% endif %}
{% endfor %}

// swiftlint:disable identifier_name
private enum DeviceType: String, CaseIterable {
    case se = "iPhone SE"
    case xs = "iPhone XS"
    case xsmax = "iPhone XS Max"

    func layout(height: CGFloat) -> PreviewLayout {
        switch self {
        case .se:
            return .fixed(width: 320, height: height)
        case .xs:
            return .fixed(width: 375, height: height)
        case .xsmax:
            return .fixed(width: 414, height: height)
        }
    }
}
// swiftlint:enable identifier_name
#endif
