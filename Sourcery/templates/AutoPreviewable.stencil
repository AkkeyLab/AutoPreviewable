import UIKit
#if canImport(SwiftUI) && DEBUG
import SwiftUI

{% for type in types.implementing.AutoPreviewable|class %}
{% if type.isFinal %}
@available(iOS 13, *)
struct {{ type.name }}Previews: PreviewProvider {
    static var previews: some View {
        Group {
            {{ type.name }}()
                {% if type.annotations.customHeight %}
                .previewLayout(.fixed(width: 320, height: {{ type.annotations.customHeight }}))
                {% endif %}
                .previewDevice(PreviewDevice(rawValue: "iPhone SE"))
            {{ type.name }}()
                {% if type.annotations.customHeight %}
                .previewLayout(.fixed(width: 375, height: {{ type.annotations.customHeight }}))
                {% endif %}
                .previewDevice(PreviewDevice(rawValue: "iPhone XS"))
            {{ type.name }}()
                {% if type.annotations.customHeight %}
                .previewLayout(.fixed(width: 414, height: {{ type.annotations.customHeight }}))
                {% endif %}
                .previewDevice(PreviewDevice(rawValue: "iPhone XS Max"))
        }
    }

    static var platform: PreviewPlatform? = .iOS
}

@available(iOS 13, *)
extension {{ type.name }}: UIViewRepresentable {
    typealias UIViewType = {{ type.name }}

    func makeUIView(context: Context) -> {{ type.name }} {
        {% if type.annotations.xibLess %}
        return .init()
        {% else %}
        // swiftlint:disable force_cast
        return UINib(nibName: String(describing: String(describing: self)), bundle: nil)
            .instantiate(withOwner: nil, options: nil)[0] as! {{ type.name }}
        // swiftlint:enable force_cast
        {% endif %}
    }

    func updateUIView(_ uiView: {{ type.name }}, context: Context) {
        // Make parameter change for preview
    }
}
{% endif %}
{% endfor %}
#endif
