import SwiftUI
import UIKit

#if DEBUG
{% for type in types.implementing.AutoPreviewable|class %}
{% if type.isFinal %}
struct {{ type.name }}Previews: PreviewProvider {
    static var previews: some View {
        Group {
            {{ type.name }}()
                .previewLayout(.fixed(width: 320, height: 568))
                .previewDevice(PreviewDevice(rawValue: "iPhone SE"))
            {{ type.name }}()
                .previewLayout(.fixed(width: 414, height: 896))
                .previewDevice(PreviewDevice(rawValue: "iPhone XS Max"))
        }
    }

    static var platform: PreviewPlatform? = .iOS
}

extension {{ type.name }}: UIViewRepresentable {
    typealias UIViewType = {{ type.name }}

    // swiftlint:disable force_cast
    func makeUIView(context: Context) -> {{ type.name }} {
        {% if type.annotations.xibLess %}
        return .init()
        {% else %}
        return UINib(nibName: String(describing: String(describing: self)), bundle: nil)
            .instantiate(withOwner: nil, options: nil)[0] as! {{ type.name }}
        {% endif %}
    }
    // swiftlint:enable force_cast

    func updateUIView(_ uiView: {{ type.name }}, context: Context) {
    }
}
{% endif %}
{% endfor %}
#endif
